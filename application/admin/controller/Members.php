<?php
/**
 * Created by PhpStorm.
 * User: code
 * Date: 2019/4/20
 * Time: 10:03
 */
namespace app\admin\controller;

use think\Request;
use app\admin\model\Member;
use app\admin\model\Level;
use app\admin\model\Card;
use app\admin\model\Mould;
use app\admin\model\Field;
use app\admin\model\Order;
use app\admin\model\Orderitem;
use app\admin\model\Category;
use app\admin\model\Article;

use lib\Form;

class Members extends BaseMould
{
    //模型名字
    public $mouldname = 'member';
    //自身模型实例
    public $m;
    //添加数据


    public function _initialize()
    {
        //调用父类的构造函数
        parent::_initialize();
        $this->m = new Member;
    }

    public function index()
    {
        if (Request::instance()->isGet())
        {
            $query = Request::instance()->get('query');
            $this->list = $this->m->where('name|phone', 'like', "%{$query}%")->order($this->order)->paginate($this->site);;
        }

        return parent::index(); // TODO: Change the autogenerated stub
    }


    public function add()
    {
        //准备父级id下拉内容
        $mv =array();
        $this->m->getTree(0, $mv);
        $carr = $this->m->getSelectArray($mv, array(0=>'顶级会员'));

        //准备会员等级下拉内容
        $level = new Level;
        $levelarr = $level->order('update','desc')->select();
        $larr = $level->getSelectArray($levelarr, array(0=>'选择会员等级'));

        foreach ($this->field as $k=>$val) {
            if($val['fieldname'] == 'parentid')
            {
                $this->field[$k]['vdefault'] = $carr;
            }elseif ($val['fieldname'] == 'levelid')
            {
                $this->field[$k]['vdefault'] = $larr;
            }
        }
        return parent::add(); // TODO: Change the autogenerated stub
    }

    public function edit($id)
    {
        //准备父级id下拉内容
        $mv =array();
        $this->m->getTree(0, $mv);
        $carr = $this->m->getSelectArray($mv, array(0=>'顶级会员'));

        //准备会员等级下拉内容
        $level = new Level;
        $levelarr = $level->order('update','desc')->select();
        $larr = $level->getSelectArray($levelarr, array(0=>'选择会员等级'));

        foreach ($this->field as $k=>$val) {
            if($val['fieldname'] == 'parentid')
            {
                $this->field[$k]['vdefault'] = $carr;
                $this->field[$k]['isAdd'] = 1;
            }elseif ($val['fieldname'] == 'levelid')
            {
                $this->field[$k]['vdefault'] = $larr;
                $this->field[$k]['isAdd'] = 1;
            }
        }


        return parent::edit($id); // TODO: Change the autogenerated stub
    }

    //会员名片
    public function card($mid)
    {
        $temp = Card::get(['mid' => $mid]);
        if(empty($temp))
        {
            $temp = new Card;
        }

        //初始化模型
        $cardm= Mould::get(['table'=>'card']);
        $this->assign('cardm',$cardm);

        //初始化字段
        $cardf = Field::where(['mid'=>$cardm['id']])->order('rank')->select();
        $this->assign('cardf',$cardf);

        if (Request::instance()->isPost())
        {

            foreach ($cardf as $val) {
                if($val['ishide'] ==1 || $val['fieldname'] == 'mid')//隐藏时跳过本次
                {
                    continue;
                }
                $temp[$val['fieldname']] = Request::instance()->post($val['fieldname']);
            }
            $temp['update'] = time();
            $temp['mid'] = $mid;
            $temp->save();
            $this->success('编辑成功！');
        }


        //处理字段显示
        $cardform = new Form();
        $cardformhtml = array();
        foreach ($cardf as $val)
        {
            if($val['ishide'] ==1 || $val['fieldname'] == 'mid')//隐藏时跳过本次
            {
                continue;
            }
            if(isset($temp[$val['fieldname']]))
            {
                $val['vdefault'] = $temp[$val['fieldname']];
            }
            $arr['html'] = $cardform->fieldToForm($val,'form-control',$val['fieldname']);
            $arr['fieldname'] = $val['fieldname'];
            $arr['itemname'] = $val['itemname'];
            $cardformhtml[] = $arr;
        }

        $this->assign('cardformhtml',$cardformhtml);

        $this->assign('title','编辑会员名片-'.$this->title);
        return view('');
    }

    //添加订单
    public function order($mid=0)
    {
        $m=$this->m->where('id', $mid)->find();


        if (Request::instance()->isPost())
        {
            $or = new Order;
            $or->ordernum = Request::instance()->post('ordernum');
            $or->mid = $mid;
            $or->update = time();
            $or->save();

            $pids =  Request::instance()->post('pid/a');
            $specss =  Request::instance()->post('specs/a');
            $units =  Request::instance()->post('unit/a');
            $nums =  Request::instance()->post('num/a');


            foreach ($pids as $k=>$v)
            {
                $oitem = new Orderitem;
                $oitem->oid = $or->id;
                $oitem->pid = $pids[$k];
                $oitem->specs = $specss[$k];
                $oitem->unit = $units[$k];
                $oitem->num = $nums[$k];
                $oitem->update = time();
                $oitem->save();
            }

            $this->success('添加成功！','/admin/members/index');

        }

        //初始化订单
        $temp['ordernum'] = makeorder();
        $temp['mid'] = $m['name'];
        $this->assign('temp',$temp);
        $this->assign('mid',$mid);

        //准备产品分类
        $catearr = array();
        $cate = new Category;
        $cate->getProTree(0, $catearr);
        $catearr = $cate->getSelectArray($catearr);
        $this->assign('catearr',$catearr);


        $this->assign('title','添加订单-'.$this->title);
        return view('');
    }

    public function getArtlistjax($cid=0)
    {
        $cate = new Category;
        $catearr = Category::all();
        $ids = $cate->getAllChild($catearr,$cid);
        $ids = empty($ids) ? $cid:$cid.','.implode(',',$ids);

        $art = new Article;
        $list = $art->whereIn('cid', $ids)->order('update','desc')->select();

        $data = array();
        foreach ($list as $key=>$val)
        {
            $data[$key]['id'] = $val['id'];
            $data[$key]['title'] = $val['title'];
            $data[$key]['specs'] = $val['specs'];
            $data[$key]['unit'] = $val['unit'];
        }
        return json_encode($data);
    }

}